{"mappings":"YAY8B,IAAxBA,EAAOC,SAASC,cAAc,QAgCpC,SAASC,EAAcC,EAAUC,GAc/B,OAbgB,IAAIC,SAAQ,SAACC,EAAKC,GAChC,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACJH,EACFF,EAAI,CAAEH,WAAUC,UAErBG,EAAI,CAACJ,WAAUC,S,MAIZA,E,CA1CPL,EAAKa,iBAAiB,UAGtB,SAAkBC,GAChBA,EAAMC,iBAEN,IAAMC,EAAeF,EAAMG,OAAOC,SAClCC,QAAQC,IAAIJ,GAEZ,IAAMK,EAAY,CAChBhB,MAAOiB,OAAON,EAAaX,MAAMkB,OACjCC,KAAMF,OAAON,EAAaQ,KAAKD,OAC/BE,OAAQH,OAAON,EAAaS,OAAOF,QAErCJ,QAAQC,IAAIC,GAEZ,IAAK,IAAIK,EAAI,EAAGA,GAAKL,EAAUI,OAAQC,GAAK,EAC1CvB,EAAcuB,EAAGL,EAAUhB,OAAOsB,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACpDc,QAAQC,IAAI,uBAAwCS,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IACzDyB,OAAM,SAAAF,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACpBc,QAAQC,IAAI,sBAAqCS,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAGvDgB,EAAUhB,OAASgB,EAAUG,KAE7BxB,EAAK+B,O","sources":["src/js/03-promises.js"],"sourcesContent":["// В HTML есть разметка формы, в поля которой пользователь будет вводить первую задержку в миллисекундах,\n// шаг увеличения задержки для каждого промиса после первого и количество промисов которое необходимо создать.\n\n// Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз,\n// сколько ввели в поле amount.При каждом вызове передай ей номер создаваемого промиса(position) и задержку \n// учитывая введенную пользователем первую задержку(delay) и шаг(step).\n\n// Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется \n// через delay времени.Значением промиса должен быть объект, в котором будут свойства position и delay со \n// значениями одноименных параметров.Используй начальный код функции для выбора того, что нужно сделать \n// с промисом - выполнить или отклонить.\n\nconst form = document.querySelector(\"form\");\n\nform.addEventListener(\"submit\", onSubmit);\n\n\nfunction onSubmit(event) {\n  event.preventDefault();\n  \n  const formElements = event.target.elements;\n  console.log(formElements);\n\n  const arrayData = {\n    delay: Number(formElements.delay.value),\n    step: Number(formElements.step.value),\n    amount: Number(formElements.amount.value),\n  };\n  console.log(arrayData);\n\n  for (let i = 1; i <= arrayData.amount; i += 1) {\n    createPromise(i, arrayData.delay).then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  }).catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    \n    arrayData.delay += arrayData.step;\n    // console.log(\"delay\", arrayData.delay);\n    form.reset();\n  }\n};\n\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((res, rej) => {\n    const shouldResolve = Math.random() > 0.3;\n    // console.log('shouldResolve',shouldResolve);\n    setTimeout(() => { \n       if (shouldResolve) {\n         res({ position, delay }); // Fulfill \n  } else {\n    rej({position, delay}) // Reject\n  }\n    })\n\n    }, delay)\n    // console.log(promise);\n  return promise;\n};\n\n\n\n"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","res","rej","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","formElements","target","elements","console","log","arrayData","Number","value","step","amount","i","then","param","concat","catch","reset"],"version":3,"file":"03-promises.acc5c0eb.js.map"}